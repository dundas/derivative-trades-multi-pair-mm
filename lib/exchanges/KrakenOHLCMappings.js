/**
 * Kraken OHLC Pair Mappings
 * 
 * Maps standard trading pair formats to Kraken OHLC endpoint formats.
 * Generated by comprehensive testing of different pair formats.
 */

export const OHLC_PAIR_MAPPINGS = {
  "BTC/USD": {
    "ohlcPair": "BTC/USD",
    "ohlcDataKey": "BTC/USD"
  },
  "ETH/USD": {
    "ohlcPair": "ETH/USD",
    "ohlcDataKey": "ETH/USD"
  },
  "SOL/USD": {
    "ohlcPair": "SOL/USD",
    "ohlcDataKey": "SOL/USD"
  },
  "ADA/USD": {
    "ohlcPair": "ADA/USD",
    "ohlcDataKey": "ADA/USD"
  },
  "DOT/USD": {
    "ohlcPair": "DOT/USD",
    "ohlcDataKey": "DOT/USD"
  },
  "AVAX/USD": {
    "ohlcPair": "AVAX/USD",
    "ohlcDataKey": "AVAX/USD"
  },
  "ATOM/USD": {
    "ohlcPair": "ATOM/USD",
    "ohlcDataKey": "ATOM/USD"
  },
  "ALGO/USD": {
    "ohlcPair": "ALGO/USD",
    "ohlcDataKey": "ALGO/USD"
  },
  "XTZ/USD": {
    "ohlcPair": "XTZ/USD",
    "ohlcDataKey": "XTZ/USD"
  },
  "LINK/USD": {
    "ohlcPair": "LINK/USD",
    "ohlcDataKey": "LINK/USD"
  },
  "UNI/USD": {
    "ohlcPair": "UNI/USD",
    "ohlcDataKey": "UNI/USD"
  },
  "AAVE/USD": {
    "ohlcPair": "AAVE/USD",
    "ohlcDataKey": "AAVE/USD"
  }
};

/**
 * Get OHLC pair format for a standard pair
 */
export function getOHLCPairFormat(standardPair) {
  return OHLC_PAIR_MAPPINGS[standardPair] || null;
}

/**
 * Check if a pair has OHLC mapping
 */
export function hasOHLCMapping(standardPair) {
  return standardPair in OHLC_PAIR_MAPPINGS;
}

/**
 * Get all supported pairs for OHLC data
 */
export function getSupportedOHLCPairs() {
  return Object.keys(OHLC_PAIR_MAPPINGS);
}

/**
 * Volatility scoring bands for different timeframes
 */
export const VOLATILITY_SCORING_BANDS = {
  // BPS ranges for volatility scoring (0-1 scale)
  EXCELLENT: { min: 100, score: 1.0 },    // 100+ BPS = excellent
  VERY_GOOD: { min: 50, score: 0.9 },     // 50+ BPS = very good
  GOOD: { min: 20, score: 0.8 },          // 20+ BPS = good
  MODERATE: { min: 10, score: 0.6 },      // 10+ BPS = moderate
  LOW: { min: 5, score: 0.4 },            // 5+ BPS = low
  VERY_LOW: { min: 1, score: 0.2 },       // 1+ BPS = very low
  MINIMAL: { min: 0, score: 0.1 }         // <1 BPS = minimal
};

/**
 * Calculate volatility score from average range in BPS
 */
export function calculateVolatilityScore(avgRangeBps) {
  const bands = Object.values(VOLATILITY_SCORING_BANDS).sort((a, b) => b.min - a.min);
  
  for (const band of bands) {
    if (avgRangeBps >= band.min) {
      return band.score;
    }
  }
  
  return VOLATILITY_SCORING_BANDS.MINIMAL.score;
} 